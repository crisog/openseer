// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"context"
	"database/sql"
)

type Querier interface {
	AddWorkerCapability(ctx context.Context, arg *AddWorkerCapabilityParams) error
	CheckJobExists(ctx context.Context, arg *CheckJobExistsParams) (bool, error)
	CompleteJob(ctx context.Context, arg *CompleteJobParams) (*AppJob, error)
	CountActiveMonitorsByID(ctx context.Context, id string) (int64, error)
	CountDeletedJobsForMonitor(ctx context.Context, monitorID string) (int64, error)
	CountJobsForMonitor(ctx context.Context, monitorID string) (int64, error)
	CountResultsByRunID(ctx context.Context, runID string) (int64, error)
	CountWorkers(ctx context.Context, arg *CountWorkersParams) (int64, error)
	CreateJob(ctx context.Context, arg *CreateJobParams) (*AppJob, error)
	CreateJobIdempotent(ctx context.Context, arg *CreateJobIdempotentParams) (*AppJob, error)
	CreateMonitor(ctx context.Context, arg *CreateMonitorParams) (*AppMonitor, error)
	DeleteMonitor(ctx context.Context, id string) error
	DeleteMonitorByUser(ctx context.Context, arg *DeleteMonitorByUserParams) error
	// Delete all pending jobs for a monitor (called when monitor is deleted)
	DeleteMonitorJobs(ctx context.Context, monitorID string) error
	DeleteWorkerCapabilities(ctx context.Context, workerID string) error
	EnrollWorker(ctx context.Context, arg *EnrollWorkerParams) (*AppWorker, error)
	ForceExpireJobLease(ctx context.Context, arg *ForceExpireJobLeaseParams) error
	GetActiveWorkers(ctx context.Context) ([]*AppWorker, error)
	GetAggregatedMetrics(ctx context.Context, arg *GetAggregatedMetricsParams) ([]*TsResultsAgg1m, error)
	GetCompletedJobsByMonitor(ctx context.Context, monitorID string) ([]*AppJob, error)
	GetJobByRunID(ctx context.Context, runID string) (*AppJob, error)
	GetJobsForMonitor(ctx context.Context, monitorID string) ([]*AppJob, error)
	GetLatestResultPerMonitor(ctx context.Context) ([]*GetLatestResultPerMonitorRow, error)
	GetMonitor(ctx context.Context, id string) (*AppMonitor, error)
	GetMonitorByUser(ctx context.Context, arg *GetMonitorByUserParams) (*AppMonitor, error)
	GetMonitorIncludingDeleted(ctx context.Context, id string) (*AppMonitor, error)
	GetReadyJobsCount(ctx context.Context) (int64, error)
	GetRecentResults(ctx context.Context, arg *GetRecentResultsParams) ([]*TsResultsRaw, error)
	GetResultByRunIDAndTime(ctx context.Context, arg *GetResultByRunIDAndTimeParams) (*GetResultByRunIDAndTimeRow, error)
	GetUptimeData24h(ctx context.Context, monitorID string) (*GetUptimeData24hRow, error)
	GetUptimeData24hRaw(ctx context.Context, monitorID string) (*GetUptimeData24hRawRow, error)
	GetUptimeData30d(ctx context.Context, monitorID string) (*GetUptimeData30dRow, error)
	GetUptimeData7d(ctx context.Context, monitorID string) (*GetUptimeData7dRow, error)
	GetUptimeTimeline24h(ctx context.Context, monitorID string) ([]*GetUptimeTimeline24hRow, error)
	GetUptimeTimeline30d(ctx context.Context, monitorID string) ([]*GetUptimeTimeline30dRow, error)
	GetUptimeTimeline7d(ctx context.Context, monitorID string) ([]*GetUptimeTimeline7dRow, error)
	GetWorkerByID(ctx context.Context, id string) (*AppWorker, error)
	GetWorkerCapabilities(ctx context.Context, workerID string) ([]*GetWorkerCapabilitiesRow, error)
	LeaseJobs(ctx context.Context, arg *LeaseJobsParams) ([]*LeaseJobsRow, error)
	LeaseJobsWithFallback(ctx context.Context, arg *LeaseJobsWithFallbackParams) ([]*LeaseJobsWithFallbackRow, error)
	// Lease jobs with monitor data
	LeaseJobsWithMonitorData(ctx context.Context, arg *LeaseJobsWithMonitorDataParams) ([]*LeaseJobsWithMonitorDataRow, error)
	ListAllMonitors(ctx context.Context) ([]*AppMonitor, error)
	// List monitors that need jobs scheduled (look ahead by schedule window)
	// Uses FOR UPDATE SKIP LOCKED to prevent race conditions between scheduler instances
	ListDueMonitors(ctx context.Context, nextDueAt sql.NullTime) ([]*AppMonitor, error)
	ListEnabledMonitors(ctx context.Context) ([]*AppMonitor, error)
	ListEnabledMonitorsByUser(ctx context.Context, userID sql.NullString) ([]*AppMonitor, error)
	ListMonitorsByUser(ctx context.Context, userID sql.NullString) ([]*AppMonitor, error)
	ListWorkers(ctx context.Context, arg *ListWorkersParams) ([]*AppWorker, error)
	MarkWorkerInactive(ctx context.Context) error
	ReclaimExpiredLeases(ctx context.Context) error
	RegisterWorker(ctx context.Context, arg *RegisterWorkerParams) (*AppWorker, error)
	RenewLease(ctx context.Context, arg *RenewLeaseParams) (*AppJob, error)
	RenewWorkerCertificate(ctx context.Context, arg *RenewWorkerCertificateParams) (*AppWorker, error)
	RevokeWorker(ctx context.Context, arg *RevokeWorkerParams) error
	UpdateMonitor(ctx context.Context, arg *UpdateMonitorParams) (*AppMonitor, error)
	UpdateMonitorByUser(ctx context.Context, arg *UpdateMonitorByUserParams) (*AppMonitor, error)
	UpdateMonitorSchedulingTime(ctx context.Context, arg *UpdateMonitorSchedulingTimeParams) (*AppMonitor, error)
	UpdateWorkerHeartbeat(ctx context.Context, id string) error
	UpsertResult(ctx context.Context, arg *UpsertResultParams) (*TsResultsRaw, error)
}

var _ Querier = (*Queries)(nil)
