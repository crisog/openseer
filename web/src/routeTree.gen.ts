/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as DashboardRouteImport } from './app/_dashboard'
import { Route as IndexRouteImport } from './app/index'
import { Route as DashboardMonitorsRouteImport } from './app/_dashboard/monitors'
import { Route as DashboardDashboardRouteImport } from './app/_dashboard/dashboard'
import { Route as DashboardMonitorsIndexRouteImport } from './app/_dashboard/monitors/index'
import { Route as ApiRpcSplatRouteImport } from './app/api/rpc/$'
import { Route as ApiAuthSplatRouteImport } from './app/api/auth/$'
import { Route as DashboardMonitorsIdRouteImport } from './app/_dashboard/monitors.$id'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardMonitorsRoute = DashboardMonitorsRouteImport.update({
  id: '/monitors',
  path: '/monitors',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardMonitorsIndexRoute = DashboardMonitorsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardMonitorsRoute,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardMonitorsIdRoute = DashboardMonitorsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardMonitorsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/monitors': typeof DashboardMonitorsRouteWithChildren
  '/monitors/$id': typeof DashboardMonitorsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/monitors/': typeof DashboardMonitorsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/monitors/$id': typeof DashboardMonitorsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/monitors': typeof DashboardMonitorsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/monitors': typeof DashboardMonitorsRouteWithChildren
  '/_dashboard/monitors/$id': typeof DashboardMonitorsIdRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/_dashboard/monitors/': typeof DashboardMonitorsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/monitors'
    | '/monitors/$id'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/monitors/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/monitors/$id'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/monitors'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/_dashboard/dashboard'
    | '/_dashboard/monitors'
    | '/_dashboard/monitors/$id'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/_dashboard/monitors/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/monitors': {
      id: '/_dashboard/monitors'
      path: '/monitors'
      fullPath: '/monitors'
      preLoaderRoute: typeof DashboardMonitorsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/monitors/': {
      id: '/_dashboard/monitors/'
      path: '/'
      fullPath: '/monitors/'
      preLoaderRoute: typeof DashboardMonitorsIndexRouteImport
      parentRoute: typeof DashboardMonitorsRoute
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/monitors/$id': {
      id: '/_dashboard/monitors/$id'
      path: '/$id'
      fullPath: '/monitors/$id'
      preLoaderRoute: typeof DashboardMonitorsIdRouteImport
      parentRoute: typeof DashboardMonitorsRoute
    }
  }
}

interface DashboardMonitorsRouteChildren {
  DashboardMonitorsIdRoute: typeof DashboardMonitorsIdRoute
  DashboardMonitorsIndexRoute: typeof DashboardMonitorsIndexRoute
}

const DashboardMonitorsRouteChildren: DashboardMonitorsRouteChildren = {
  DashboardMonitorsIdRoute: DashboardMonitorsIdRoute,
  DashboardMonitorsIndexRoute: DashboardMonitorsIndexRoute,
}

const DashboardMonitorsRouteWithChildren =
  DashboardMonitorsRoute._addFileChildren(DashboardMonitorsRouteChildren)

interface DashboardRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardMonitorsRoute: typeof DashboardMonitorsRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardMonitorsRoute: DashboardMonitorsRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
