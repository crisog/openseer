// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: openseer/v1/monitors.proto

package openseerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateMonitorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IntervalMs    int32                  `protobuf:"varint,4,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	TimeoutMs     int32                  `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	Regions       []string               `protobuf:"bytes,6,rep,name=regions,proto3" json:"regions,omitempty"`
	Method        string                 `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	Headers       *structpb.Struct       `protobuf:"bytes,8,opt,name=headers,proto3" json:"headers,omitempty"`
	Assertions    *structpb.Struct       `protobuf:"bytes,9,opt,name=assertions,proto3" json:"assertions,omitempty"`
	Enabled       *bool                  `protobuf:"varint,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMonitorRequest) Reset() {
	*x = CreateMonitorRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorRequest) ProtoMessage() {}

func (x *CreateMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateMonitorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMonitorRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateMonitorRequest) GetIntervalMs() int32 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *CreateMonitorRequest) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *CreateMonitorRequest) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *CreateMonitorRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CreateMonitorRequest) GetHeaders() *structpb.Struct {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *CreateMonitorRequest) GetAssertions() *structpb.Struct {
	if x != nil {
		return x.Assertions
	}
	return nil
}

func (x *CreateMonitorRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CreateMonitorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Monitor       *Monitor               `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMonitorResponse) Reset() {
	*x = CreateMonitorResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorResponse) ProtoMessage() {}

func (x *CreateMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMonitorResponse) GetMonitor() *Monitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type GetMonitorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorRequest) Reset() {
	*x = GetMonitorRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorRequest) ProtoMessage() {}

func (x *GetMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{2}
}

func (x *GetMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMonitorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Monitor       *Monitor               `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorResponse) Reset() {
	*x = GetMonitorResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorResponse) ProtoMessage() {}

func (x *GetMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{3}
}

func (x *GetMonitorResponse) GetMonitor() *Monitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type UpdateMonitorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url           *string                `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	IntervalMs    *int32                 `protobuf:"varint,4,opt,name=interval_ms,json=intervalMs,proto3,oneof" json:"interval_ms,omitempty"`
	TimeoutMs     *int32                 `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
	Regions       []string               `protobuf:"bytes,6,rep,name=regions,proto3" json:"regions,omitempty"`
	Method        *string                `protobuf:"bytes,7,opt,name=method,proto3,oneof" json:"method,omitempty"`
	Headers       *structpb.Struct       `protobuf:"bytes,8,opt,name=headers,proto3" json:"headers,omitempty"`
	Assertions    *structpb.Struct       `protobuf:"bytes,9,opt,name=assertions,proto3" json:"assertions,omitempty"`
	Enabled       *bool                  `protobuf:"varint,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMonitorRequest) Reset() {
	*x = UpdateMonitorRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorRequest) ProtoMessage() {}

func (x *UpdateMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMonitorRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateMonitorRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UpdateMonitorRequest) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

func (x *UpdateMonitorRequest) GetTimeoutMs() int32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

func (x *UpdateMonitorRequest) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *UpdateMonitorRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *UpdateMonitorRequest) GetHeaders() *structpb.Struct {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UpdateMonitorRequest) GetAssertions() *structpb.Struct {
	if x != nil {
		return x.Assertions
	}
	return nil
}

func (x *UpdateMonitorRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type UpdateMonitorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Monitor       *Monitor               `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMonitorResponse) Reset() {
	*x = UpdateMonitorResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorResponse) ProtoMessage() {}

func (x *UpdateMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorResponse.ProtoReflect.Descriptor instead.
func (*UpdateMonitorResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMonitorResponse) GetMonitor() *Monitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type DeleteMonitorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMonitorRequest) Reset() {
	*x = DeleteMonitorRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorRequest) ProtoMessage() {}

func (x *DeleteMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteMonitorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMonitorResponse) Reset() {
	*x = DeleteMonitorResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorResponse) ProtoMessage() {}

func (x *DeleteMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorResponse.ProtoReflect.Descriptor instead.
func (*DeleteMonitorResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{7}
}

type ListMonitorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMonitorsRequest) Reset() {
	*x = ListMonitorsRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMonitorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonitorsRequest) ProtoMessage() {}

func (x *ListMonitorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonitorsRequest.ProtoReflect.Descriptor instead.
func (*ListMonitorsRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{8}
}

type ListMonitorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Monitors      []*Monitor             `protobuf:"bytes,1,rep,name=monitors,proto3" json:"monitors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMonitorsResponse) Reset() {
	*x = ListMonitorsResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMonitorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonitorsResponse) ProtoMessage() {}

func (x *ListMonitorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonitorsResponse.ProtoReflect.Descriptor instead.
func (*ListMonitorsResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{9}
}

func (x *ListMonitorsResponse) GetMonitors() []*Monitor {
	if x != nil {
		return x.Monitors
	}
	return nil
}

type GetMonitorResultsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonitorId     string                 `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorResultsRequest) Reset() {
	*x = GetMonitorResultsRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorResultsRequest) ProtoMessage() {}

func (x *GetMonitorResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorResultsRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorResultsRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{10}
}

func (x *GetMonitorResultsRequest) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *GetMonitorResultsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMonitorResultsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*MonitorResult       `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorResultsResponse) Reset() {
	*x = GetMonitorResultsResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorResultsResponse) ProtoMessage() {}

func (x *GetMonitorResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorResultsResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorResultsResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{11}
}

func (x *GetMonitorResultsResponse) GetResults() []*MonitorResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetMonitorMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonitorId     string                 `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorMetricsRequest) Reset() {
	*x = GetMonitorMetricsRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorMetricsRequest) ProtoMessage() {}

func (x *GetMonitorMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorMetricsRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{12}
}

func (x *GetMonitorMetricsRequest) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *GetMonitorMetricsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMonitorMetricsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetMonitorMetricsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metrics       []*MonitorMetrics      `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorMetricsResponse) Reset() {
	*x = GetMonitorMetricsResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorMetricsResponse) ProtoMessage() {}

func (x *GetMonitorMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorMetricsResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{13}
}

func (x *GetMonitorMetricsResponse) GetMetrics() []*MonitorMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Monitor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url             string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IntervalMs      int32                  `protobuf:"varint,4,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	TimeoutMs       int32                  `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	Regions         []string               `protobuf:"bytes,6,rep,name=regions,proto3" json:"regions,omitempty"`
	Method          string                 `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	Headers         *structpb.Struct       `protobuf:"bytes,8,opt,name=headers,proto3" json:"headers,omitempty"`
	Assertions      *structpb.Struct       `protobuf:"bytes,9,opt,name=assertions,proto3" json:"assertions,omitempty"`
	Enabled         bool                   `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastScheduledAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_scheduled_at,json=lastScheduledAt,proto3,oneof" json:"last_scheduled_at,omitempty"`
	NextDueAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=next_due_at,json=nextDueAt,proto3,oneof" json:"next_due_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{14}
}

func (x *Monitor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Monitor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Monitor) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Monitor) GetIntervalMs() int32 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *Monitor) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *Monitor) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Monitor) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Monitor) GetHeaders() *structpb.Struct {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Monitor) GetAssertions() *structpb.Struct {
	if x != nil {
		return x.Assertions
	}
	return nil
}

func (x *Monitor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Monitor) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Monitor) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Monitor) GetLastScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScheduledAt
	}
	return nil
}

func (x *Monitor) GetNextDueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDueAt
	}
	return nil
}

type MonitorResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	MonitorId     string                 `protobuf:"bytes,2,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	Region        string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	EventAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_at,json=eventAt,proto3" json:"event_at,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	HttpCode      *int32                 `protobuf:"varint,6,opt,name=http_code,json=httpCode,proto3,oneof" json:"http_code,omitempty"`
	DnsMs         *int32                 `protobuf:"varint,7,opt,name=dns_ms,json=dnsMs,proto3,oneof" json:"dns_ms,omitempty"`
	ConnectMs     *int32                 `protobuf:"varint,8,opt,name=connect_ms,json=connectMs,proto3,oneof" json:"connect_ms,omitempty"`
	TlsMs         *int32                 `protobuf:"varint,9,opt,name=tls_ms,json=tlsMs,proto3,oneof" json:"tls_ms,omitempty"`
	TtfbMs        *int32                 `protobuf:"varint,10,opt,name=ttfb_ms,json=ttfbMs,proto3,oneof" json:"ttfb_ms,omitempty"`
	DownloadMs    *int32                 `protobuf:"varint,11,opt,name=download_ms,json=downloadMs,proto3,oneof" json:"download_ms,omitempty"`
	TotalMs       *int32                 `protobuf:"varint,12,opt,name=total_ms,json=totalMs,proto3,oneof" json:"total_ms,omitempty"`
	SizeBytes     *int64                 `protobuf:"varint,13,opt,name=size_bytes,json=sizeBytes,proto3,oneof" json:"size_bytes,omitempty"`
	ErrorMessage  *string                `protobuf:"bytes,14,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorResult) Reset() {
	*x = MonitorResult{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorResult) ProtoMessage() {}

func (x *MonitorResult) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorResult.ProtoReflect.Descriptor instead.
func (*MonitorResult) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{15}
}

func (x *MonitorResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *MonitorResult) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *MonitorResult) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MonitorResult) GetEventAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EventAt
	}
	return nil
}

func (x *MonitorResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MonitorResult) GetHttpCode() int32 {
	if x != nil && x.HttpCode != nil {
		return *x.HttpCode
	}
	return 0
}

func (x *MonitorResult) GetDnsMs() int32 {
	if x != nil && x.DnsMs != nil {
		return *x.DnsMs
	}
	return 0
}

func (x *MonitorResult) GetConnectMs() int32 {
	if x != nil && x.ConnectMs != nil {
		return *x.ConnectMs
	}
	return 0
}

func (x *MonitorResult) GetTlsMs() int32 {
	if x != nil && x.TlsMs != nil {
		return *x.TlsMs
	}
	return 0
}

func (x *MonitorResult) GetTtfbMs() int32 {
	if x != nil && x.TtfbMs != nil {
		return *x.TtfbMs
	}
	return 0
}

func (x *MonitorResult) GetDownloadMs() int32 {
	if x != nil && x.DownloadMs != nil {
		return *x.DownloadMs
	}
	return 0
}

func (x *MonitorResult) GetTotalMs() int32 {
	if x != nil && x.TotalMs != nil {
		return *x.TotalMs
	}
	return 0
}

func (x *MonitorResult) GetSizeBytes() int64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *MonitorResult) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type MonitorMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonitorId     string                 `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Bucket        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Count         int64                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	ErrorCount    int64                  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	ErrorRate     float64                `protobuf:"fixed64,6,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	P50Ms         float64                `protobuf:"fixed64,7,opt,name=p50_ms,json=p50Ms,proto3" json:"p50_ms,omitempty"`
	P95Ms         float64                `protobuf:"fixed64,8,opt,name=p95_ms,json=p95Ms,proto3" json:"p95_ms,omitempty"`
	P99Ms         float64                `protobuf:"fixed64,9,opt,name=p99_ms,json=p99Ms,proto3" json:"p99_ms,omitempty"`
	MinMs         float64                `protobuf:"fixed64,10,opt,name=min_ms,json=minMs,proto3" json:"min_ms,omitempty"`
	MaxMs         float64                `protobuf:"fixed64,11,opt,name=max_ms,json=maxMs,proto3" json:"max_ms,omitempty"`
	AvgMs         float64                `protobuf:"fixed64,12,opt,name=avg_ms,json=avgMs,proto3" json:"avg_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorMetrics) Reset() {
	*x = MonitorMetrics{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMetrics) ProtoMessage() {}

func (x *MonitorMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMetrics.ProtoReflect.Descriptor instead.
func (*MonitorMetrics) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{16}
}

func (x *MonitorMetrics) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *MonitorMetrics) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MonitorMetrics) GetBucket() *timestamppb.Timestamp {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *MonitorMetrics) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MonitorMetrics) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *MonitorMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *MonitorMetrics) GetP50Ms() float64 {
	if x != nil {
		return x.P50Ms
	}
	return 0
}

func (x *MonitorMetrics) GetP95Ms() float64 {
	if x != nil {
		return x.P95Ms
	}
	return 0
}

func (x *MonitorMetrics) GetP99Ms() float64 {
	if x != nil {
		return x.P99Ms
	}
	return 0
}

func (x *MonitorMetrics) GetMinMs() float64 {
	if x != nil {
		return x.MinMs
	}
	return 0
}

func (x *MonitorMetrics) GetMaxMs() float64 {
	if x != nil {
		return x.MaxMs
	}
	return 0
}

func (x *MonitorMetrics) GetAvgMs() float64 {
	if x != nil {
		return x.AvgMs
	}
	return 0
}

type GetMonitorUptimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonitorId     string                 `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	TimeRange     string                 `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"` // "24h", "7d", or "30d"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorUptimeRequest) Reset() {
	*x = GetMonitorUptimeRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorUptimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorUptimeRequest) ProtoMessage() {}

func (x *GetMonitorUptimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorUptimeRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorUptimeRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{17}
}

func (x *GetMonitorUptimeRequest) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *GetMonitorUptimeRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

type GetMonitorUptimeResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TotalChecks      int64                  `protobuf:"varint,1,opt,name=total_checks,json=totalChecks,proto3" json:"total_checks,omitempty"`
	SuccessfulChecks int64                  `protobuf:"varint,2,opt,name=successful_checks,json=successfulChecks,proto3" json:"successful_checks,omitempty"`
	FailedChecks     int64                  `protobuf:"varint,3,opt,name=failed_checks,json=failedChecks,proto3" json:"failed_checks,omitempty"`
	UptimePercentage float64                `protobuf:"fixed64,4,opt,name=uptime_percentage,json=uptimePercentage,proto3" json:"uptime_percentage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMonitorUptimeResponse) Reset() {
	*x = GetMonitorUptimeResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorUptimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorUptimeResponse) ProtoMessage() {}

func (x *GetMonitorUptimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorUptimeResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorUptimeResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{18}
}

func (x *GetMonitorUptimeResponse) GetTotalChecks() int64 {
	if x != nil {
		return x.TotalChecks
	}
	return 0
}

func (x *GetMonitorUptimeResponse) GetSuccessfulChecks() int64 {
	if x != nil {
		return x.SuccessfulChecks
	}
	return 0
}

func (x *GetMonitorUptimeResponse) GetFailedChecks() int64 {
	if x != nil {
		return x.FailedChecks
	}
	return 0
}

func (x *GetMonitorUptimeResponse) GetUptimePercentage() float64 {
	if x != nil {
		return x.UptimePercentage
	}
	return 0
}

type GetMonitorUptimeTimelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonitorId     string                 `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	TimeRange     string                 `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"` // "24h", "7d", or "30d"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorUptimeTimelineRequest) Reset() {
	*x = GetMonitorUptimeTimelineRequest{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorUptimeTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorUptimeTimelineRequest) ProtoMessage() {}

func (x *GetMonitorUptimeTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorUptimeTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorUptimeTimelineRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{19}
}

func (x *GetMonitorUptimeTimelineRequest) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *GetMonitorUptimeTimelineRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

type UptimeTimelinePoint struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Bucket           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	TotalChecks      int64                  `protobuf:"varint,2,opt,name=total_checks,json=totalChecks,proto3" json:"total_checks,omitempty"`
	SuccessfulChecks int64                  `protobuf:"varint,3,opt,name=successful_checks,json=successfulChecks,proto3" json:"successful_checks,omitempty"`
	UptimePercentage float64                `protobuf:"fixed64,4,opt,name=uptime_percentage,json=uptimePercentage,proto3" json:"uptime_percentage,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UptimeTimelinePoint) Reset() {
	*x = UptimeTimelinePoint{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeTimelinePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeTimelinePoint) ProtoMessage() {}

func (x *UptimeTimelinePoint) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeTimelinePoint.ProtoReflect.Descriptor instead.
func (*UptimeTimelinePoint) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{20}
}

func (x *UptimeTimelinePoint) GetBucket() *timestamppb.Timestamp {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *UptimeTimelinePoint) GetTotalChecks() int64 {
	if x != nil {
		return x.TotalChecks
	}
	return 0
}

func (x *UptimeTimelinePoint) GetSuccessfulChecks() int64 {
	if x != nil {
		return x.SuccessfulChecks
	}
	return 0
}

func (x *UptimeTimelinePoint) GetUptimePercentage() float64 {
	if x != nil {
		return x.UptimePercentage
	}
	return 0
}

type GetMonitorUptimeTimelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*UptimeTimelinePoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonitorUptimeTimelineResponse) Reset() {
	*x = GetMonitorUptimeTimelineResponse{}
	mi := &file_openseer_v1_monitors_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonitorUptimeTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorUptimeTimelineResponse) ProtoMessage() {}

func (x *GetMonitorUptimeTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_monitors_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorUptimeTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorUptimeTimelineResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_monitors_proto_rawDescGZIP(), []int{21}
}

func (x *GetMonitorUptimeTimelineResponse) GetData() []*UptimeTimelinePoint {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_openseer_v1_monitors_proto protoreflect.FileDescriptor

const file_openseer_v1_monitors_proto_rawDesc = "" +
	"\n" +
	"\x1aopenseer/v1/monitors.proto\x12\vopenseer.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xd5\x02\n" +
	"\x14CreateMonitorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x1f\n" +
	"\vinterval_ms\x18\x04 \x01(\x05R\n" +
	"intervalMs\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x05 \x01(\x05R\ttimeoutMs\x12\x18\n" +
	"\aregions\x18\x06 \x03(\tR\aregions\x12\x16\n" +
	"\x06method\x18\a \x01(\tR\x06method\x121\n" +
	"\aheaders\x18\b \x01(\v2\x17.google.protobuf.StructR\aheaders\x127\n" +
	"\n" +
	"assertions\x18\t \x01(\v2\x17.google.protobuf.StructR\n" +
	"assertions\x12\x1d\n" +
	"\aenabled\x18\n" +
	" \x01(\bH\x00R\aenabled\x88\x01\x01B\n" +
	"\n" +
	"\b_enabled\"G\n" +
	"\x15CreateMonitorResponse\x12.\n" +
	"\amonitor\x18\x01 \x01(\v2\x14.openseer.v1.MonitorR\amonitor\"#\n" +
	"\x11GetMonitorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"D\n" +
	"\x12GetMonitorResponse\x12.\n" +
	"\amonitor\x18\x01 \x01(\v2\x14.openseer.v1.MonitorR\amonitor\"\xa9\x03\n" +
	"\x14UpdateMonitorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x00R\x04name\x88\x01\x01\x12\x15\n" +
	"\x03url\x18\x03 \x01(\tH\x01R\x03url\x88\x01\x01\x12$\n" +
	"\vinterval_ms\x18\x04 \x01(\x05H\x02R\n" +
	"intervalMs\x88\x01\x01\x12\"\n" +
	"\n" +
	"timeout_ms\x18\x05 \x01(\x05H\x03R\ttimeoutMs\x88\x01\x01\x12\x18\n" +
	"\aregions\x18\x06 \x03(\tR\aregions\x12\x1b\n" +
	"\x06method\x18\a \x01(\tH\x04R\x06method\x88\x01\x01\x121\n" +
	"\aheaders\x18\b \x01(\v2\x17.google.protobuf.StructR\aheaders\x127\n" +
	"\n" +
	"assertions\x18\t \x01(\v2\x17.google.protobuf.StructR\n" +
	"assertions\x12\x1d\n" +
	"\aenabled\x18\n" +
	" \x01(\bH\x05R\aenabled\x88\x01\x01B\a\n" +
	"\x05_nameB\x06\n" +
	"\x04_urlB\x0e\n" +
	"\f_interval_msB\r\n" +
	"\v_timeout_msB\t\n" +
	"\a_methodB\n" +
	"\n" +
	"\b_enabled\"G\n" +
	"\x15UpdateMonitorResponse\x12.\n" +
	"\amonitor\x18\x01 \x01(\v2\x14.openseer.v1.MonitorR\amonitor\"&\n" +
	"\x14DeleteMonitorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x17\n" +
	"\x15DeleteMonitorResponse\"\x15\n" +
	"\x13ListMonitorsRequest\"H\n" +
	"\x14ListMonitorsResponse\x120\n" +
	"\bmonitors\x18\x01 \x03(\v2\x14.openseer.v1.MonitorR\bmonitors\"O\n" +
	"\x18GetMonitorResultsRequest\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x01 \x01(\tR\tmonitorId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"Q\n" +
	"\x19GetMonitorResultsResponse\x124\n" +
	"\aresults\x18\x01 \x03(\v2\x1a.openseer.v1.MonitorResultR\aresults\"\xab\x01\n" +
	"\x18GetMonitorMetricsRequest\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x01 \x01(\tR\tmonitorId\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"R\n" +
	"\x19GetMonitorMetricsResponse\x125\n" +
	"\ametrics\x18\x01 \x03(\v2\x1b.openseer.v1.MonitorMetricsR\ametrics\"\xe1\x04\n" +
	"\aMonitor\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x1f\n" +
	"\vinterval_ms\x18\x04 \x01(\x05R\n" +
	"intervalMs\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x05 \x01(\x05R\ttimeoutMs\x12\x18\n" +
	"\aregions\x18\x06 \x03(\tR\aregions\x12\x16\n" +
	"\x06method\x18\a \x01(\tR\x06method\x121\n" +
	"\aheaders\x18\b \x01(\v2\x17.google.protobuf.StructR\aheaders\x127\n" +
	"\n" +
	"assertions\x18\t \x01(\v2\x17.google.protobuf.StructR\n" +
	"assertions\x12\x18\n" +
	"\aenabled\x18\n" +
	" \x01(\bR\aenabled\x129\n" +
	"\n" +
	"created_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12K\n" +
	"\x11last_scheduled_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x0flastScheduledAt\x88\x01\x01\x12?\n" +
	"\vnext_due_at\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampH\x01R\tnextDueAt\x88\x01\x01B\x14\n" +
	"\x12_last_scheduled_atB\x0e\n" +
	"\f_next_due_at\"\xd9\x04\n" +
	"\rMonitorResult\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x02 \x01(\tR\tmonitorId\x12\x16\n" +
	"\x06region\x18\x03 \x01(\tR\x06region\x125\n" +
	"\bevent_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aeventAt\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12 \n" +
	"\thttp_code\x18\x06 \x01(\x05H\x00R\bhttpCode\x88\x01\x01\x12\x1a\n" +
	"\x06dns_ms\x18\a \x01(\x05H\x01R\x05dnsMs\x88\x01\x01\x12\"\n" +
	"\n" +
	"connect_ms\x18\b \x01(\x05H\x02R\tconnectMs\x88\x01\x01\x12\x1a\n" +
	"\x06tls_ms\x18\t \x01(\x05H\x03R\x05tlsMs\x88\x01\x01\x12\x1c\n" +
	"\attfb_ms\x18\n" +
	" \x01(\x05H\x04R\x06ttfbMs\x88\x01\x01\x12$\n" +
	"\vdownload_ms\x18\v \x01(\x05H\x05R\n" +
	"downloadMs\x88\x01\x01\x12\x1e\n" +
	"\btotal_ms\x18\f \x01(\x05H\x06R\atotalMs\x88\x01\x01\x12\"\n" +
	"\n" +
	"size_bytes\x18\r \x01(\x03H\aR\tsizeBytes\x88\x01\x01\x12(\n" +
	"\rerror_message\x18\x0e \x01(\tH\bR\ferrorMessage\x88\x01\x01B\f\n" +
	"\n" +
	"_http_codeB\t\n" +
	"\a_dns_msB\r\n" +
	"\v_connect_msB\t\n" +
	"\a_tls_msB\n" +
	"\n" +
	"\b_ttfb_msB\x0e\n" +
	"\f_download_msB\v\n" +
	"\t_total_msB\r\n" +
	"\v_size_bytesB\x10\n" +
	"\x0e_error_message\"\xdb\x02\n" +
	"\x0eMonitorMetrics\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x01 \x01(\tR\tmonitorId\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x122\n" +
	"\x06bucket\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x06bucket\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x03R\x05count\x12\x1f\n" +
	"\verror_count\x18\x05 \x01(\x03R\n" +
	"errorCount\x12\x1d\n" +
	"\n" +
	"error_rate\x18\x06 \x01(\x01R\terrorRate\x12\x15\n" +
	"\x06p50_ms\x18\a \x01(\x01R\x05p50Ms\x12\x15\n" +
	"\x06p95_ms\x18\b \x01(\x01R\x05p95Ms\x12\x15\n" +
	"\x06p99_ms\x18\t \x01(\x01R\x05p99Ms\x12\x15\n" +
	"\x06min_ms\x18\n" +
	" \x01(\x01R\x05minMs\x12\x15\n" +
	"\x06max_ms\x18\v \x01(\x01R\x05maxMs\x12\x15\n" +
	"\x06avg_ms\x18\f \x01(\x01R\x05avgMs\"W\n" +
	"\x17GetMonitorUptimeRequest\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x01 \x01(\tR\tmonitorId\x12\x1d\n" +
	"\n" +
	"time_range\x18\x02 \x01(\tR\ttimeRange\"\xbc\x01\n" +
	"\x18GetMonitorUptimeResponse\x12!\n" +
	"\ftotal_checks\x18\x01 \x01(\x03R\vtotalChecks\x12+\n" +
	"\x11successful_checks\x18\x02 \x01(\x03R\x10successfulChecks\x12#\n" +
	"\rfailed_checks\x18\x03 \x01(\x03R\ffailedChecks\x12+\n" +
	"\x11uptime_percentage\x18\x04 \x01(\x01R\x10uptimePercentage\"_\n" +
	"\x1fGetMonitorUptimeTimelineRequest\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x01 \x01(\tR\tmonitorId\x12\x1d\n" +
	"\n" +
	"time_range\x18\x02 \x01(\tR\ttimeRange\"\xc6\x01\n" +
	"\x13UptimeTimelinePoint\x122\n" +
	"\x06bucket\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x06bucket\x12!\n" +
	"\ftotal_checks\x18\x02 \x01(\x03R\vtotalChecks\x12+\n" +
	"\x11successful_checks\x18\x03 \x01(\x03R\x10successfulChecks\x12+\n" +
	"\x11uptime_percentage\x18\x04 \x01(\x01R\x10uptimePercentage\"X\n" +
	" GetMonitorUptimeTimelineResponse\x124\n" +
	"\x04data\x18\x01 \x03(\v2 .openseer.v1.UptimeTimelinePointR\x04data2\xf1\x06\n" +
	"\x0fMonitorsService\x12X\n" +
	"\rCreateMonitor\x12!.openseer.v1.CreateMonitorRequest\x1a\".openseer.v1.CreateMonitorResponse\"\x00\x12O\n" +
	"\n" +
	"GetMonitor\x12\x1e.openseer.v1.GetMonitorRequest\x1a\x1f.openseer.v1.GetMonitorResponse\"\x00\x12X\n" +
	"\rUpdateMonitor\x12!.openseer.v1.UpdateMonitorRequest\x1a\".openseer.v1.UpdateMonitorResponse\"\x00\x12X\n" +
	"\rDeleteMonitor\x12!.openseer.v1.DeleteMonitorRequest\x1a\".openseer.v1.DeleteMonitorResponse\"\x00\x12U\n" +
	"\fListMonitors\x12 .openseer.v1.ListMonitorsRequest\x1a!.openseer.v1.ListMonitorsResponse\"\x00\x12d\n" +
	"\x11GetMonitorResults\x12%.openseer.v1.GetMonitorResultsRequest\x1a&.openseer.v1.GetMonitorResultsResponse\"\x00\x12d\n" +
	"\x11GetMonitorMetrics\x12%.openseer.v1.GetMonitorMetricsRequest\x1a&.openseer.v1.GetMonitorMetricsResponse\"\x00\x12a\n" +
	"\x10GetMonitorUptime\x12$.openseer.v1.GetMonitorUptimeRequest\x1a%.openseer.v1.GetMonitorUptimeResponse\"\x00\x12y\n" +
	"\x18GetMonitorUptimeTimeline\x12,.openseer.v1.GetMonitorUptimeTimelineRequest\x1a-.openseer.v1.GetMonitorUptimeTimelineResponse\"\x00B7Z5github.com/crisog/openseer/gen/openseer/v1;openseerv1b\x06proto3"

var (
	file_openseer_v1_monitors_proto_rawDescOnce sync.Once
	file_openseer_v1_monitors_proto_rawDescData []byte
)

func file_openseer_v1_monitors_proto_rawDescGZIP() []byte {
	file_openseer_v1_monitors_proto_rawDescOnce.Do(func() {
		file_openseer_v1_monitors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_openseer_v1_monitors_proto_rawDesc), len(file_openseer_v1_monitors_proto_rawDesc)))
	})
	return file_openseer_v1_monitors_proto_rawDescData
}

var file_openseer_v1_monitors_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_openseer_v1_monitors_proto_goTypes = []any{
	(*CreateMonitorRequest)(nil),             // 0: openseer.v1.CreateMonitorRequest
	(*CreateMonitorResponse)(nil),            // 1: openseer.v1.CreateMonitorResponse
	(*GetMonitorRequest)(nil),                // 2: openseer.v1.GetMonitorRequest
	(*GetMonitorResponse)(nil),               // 3: openseer.v1.GetMonitorResponse
	(*UpdateMonitorRequest)(nil),             // 4: openseer.v1.UpdateMonitorRequest
	(*UpdateMonitorResponse)(nil),            // 5: openseer.v1.UpdateMonitorResponse
	(*DeleteMonitorRequest)(nil),             // 6: openseer.v1.DeleteMonitorRequest
	(*DeleteMonitorResponse)(nil),            // 7: openseer.v1.DeleteMonitorResponse
	(*ListMonitorsRequest)(nil),              // 8: openseer.v1.ListMonitorsRequest
	(*ListMonitorsResponse)(nil),             // 9: openseer.v1.ListMonitorsResponse
	(*GetMonitorResultsRequest)(nil),         // 10: openseer.v1.GetMonitorResultsRequest
	(*GetMonitorResultsResponse)(nil),        // 11: openseer.v1.GetMonitorResultsResponse
	(*GetMonitorMetricsRequest)(nil),         // 12: openseer.v1.GetMonitorMetricsRequest
	(*GetMonitorMetricsResponse)(nil),        // 13: openseer.v1.GetMonitorMetricsResponse
	(*Monitor)(nil),                          // 14: openseer.v1.Monitor
	(*MonitorResult)(nil),                    // 15: openseer.v1.MonitorResult
	(*MonitorMetrics)(nil),                   // 16: openseer.v1.MonitorMetrics
	(*GetMonitorUptimeRequest)(nil),          // 17: openseer.v1.GetMonitorUptimeRequest
	(*GetMonitorUptimeResponse)(nil),         // 18: openseer.v1.GetMonitorUptimeResponse
	(*GetMonitorUptimeTimelineRequest)(nil),  // 19: openseer.v1.GetMonitorUptimeTimelineRequest
	(*UptimeTimelinePoint)(nil),              // 20: openseer.v1.UptimeTimelinePoint
	(*GetMonitorUptimeTimelineResponse)(nil), // 21: openseer.v1.GetMonitorUptimeTimelineResponse
	(*structpb.Struct)(nil),                  // 22: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),            // 23: google.protobuf.Timestamp
}
var file_openseer_v1_monitors_proto_depIdxs = []int32{
	22, // 0: openseer.v1.CreateMonitorRequest.headers:type_name -> google.protobuf.Struct
	22, // 1: openseer.v1.CreateMonitorRequest.assertions:type_name -> google.protobuf.Struct
	14, // 2: openseer.v1.CreateMonitorResponse.monitor:type_name -> openseer.v1.Monitor
	14, // 3: openseer.v1.GetMonitorResponse.monitor:type_name -> openseer.v1.Monitor
	22, // 4: openseer.v1.UpdateMonitorRequest.headers:type_name -> google.protobuf.Struct
	22, // 5: openseer.v1.UpdateMonitorRequest.assertions:type_name -> google.protobuf.Struct
	14, // 6: openseer.v1.UpdateMonitorResponse.monitor:type_name -> openseer.v1.Monitor
	14, // 7: openseer.v1.ListMonitorsResponse.monitors:type_name -> openseer.v1.Monitor
	15, // 8: openseer.v1.GetMonitorResultsResponse.results:type_name -> openseer.v1.MonitorResult
	23, // 9: openseer.v1.GetMonitorMetricsRequest.start_time:type_name -> google.protobuf.Timestamp
	23, // 10: openseer.v1.GetMonitorMetricsRequest.end_time:type_name -> google.protobuf.Timestamp
	16, // 11: openseer.v1.GetMonitorMetricsResponse.metrics:type_name -> openseer.v1.MonitorMetrics
	22, // 12: openseer.v1.Monitor.headers:type_name -> google.protobuf.Struct
	22, // 13: openseer.v1.Monitor.assertions:type_name -> google.protobuf.Struct
	23, // 14: openseer.v1.Monitor.created_at:type_name -> google.protobuf.Timestamp
	23, // 15: openseer.v1.Monitor.updated_at:type_name -> google.protobuf.Timestamp
	23, // 16: openseer.v1.Monitor.last_scheduled_at:type_name -> google.protobuf.Timestamp
	23, // 17: openseer.v1.Monitor.next_due_at:type_name -> google.protobuf.Timestamp
	23, // 18: openseer.v1.MonitorResult.event_at:type_name -> google.protobuf.Timestamp
	23, // 19: openseer.v1.MonitorMetrics.bucket:type_name -> google.protobuf.Timestamp
	23, // 20: openseer.v1.UptimeTimelinePoint.bucket:type_name -> google.protobuf.Timestamp
	20, // 21: openseer.v1.GetMonitorUptimeTimelineResponse.data:type_name -> openseer.v1.UptimeTimelinePoint
	0,  // 22: openseer.v1.MonitorsService.CreateMonitor:input_type -> openseer.v1.CreateMonitorRequest
	2,  // 23: openseer.v1.MonitorsService.GetMonitor:input_type -> openseer.v1.GetMonitorRequest
	4,  // 24: openseer.v1.MonitorsService.UpdateMonitor:input_type -> openseer.v1.UpdateMonitorRequest
	6,  // 25: openseer.v1.MonitorsService.DeleteMonitor:input_type -> openseer.v1.DeleteMonitorRequest
	8,  // 26: openseer.v1.MonitorsService.ListMonitors:input_type -> openseer.v1.ListMonitorsRequest
	10, // 27: openseer.v1.MonitorsService.GetMonitorResults:input_type -> openseer.v1.GetMonitorResultsRequest
	12, // 28: openseer.v1.MonitorsService.GetMonitorMetrics:input_type -> openseer.v1.GetMonitorMetricsRequest
	17, // 29: openseer.v1.MonitorsService.GetMonitorUptime:input_type -> openseer.v1.GetMonitorUptimeRequest
	19, // 30: openseer.v1.MonitorsService.GetMonitorUptimeTimeline:input_type -> openseer.v1.GetMonitorUptimeTimelineRequest
	1,  // 31: openseer.v1.MonitorsService.CreateMonitor:output_type -> openseer.v1.CreateMonitorResponse
	3,  // 32: openseer.v1.MonitorsService.GetMonitor:output_type -> openseer.v1.GetMonitorResponse
	5,  // 33: openseer.v1.MonitorsService.UpdateMonitor:output_type -> openseer.v1.UpdateMonitorResponse
	7,  // 34: openseer.v1.MonitorsService.DeleteMonitor:output_type -> openseer.v1.DeleteMonitorResponse
	9,  // 35: openseer.v1.MonitorsService.ListMonitors:output_type -> openseer.v1.ListMonitorsResponse
	11, // 36: openseer.v1.MonitorsService.GetMonitorResults:output_type -> openseer.v1.GetMonitorResultsResponse
	13, // 37: openseer.v1.MonitorsService.GetMonitorMetrics:output_type -> openseer.v1.GetMonitorMetricsResponse
	18, // 38: openseer.v1.MonitorsService.GetMonitorUptime:output_type -> openseer.v1.GetMonitorUptimeResponse
	21, // 39: openseer.v1.MonitorsService.GetMonitorUptimeTimeline:output_type -> openseer.v1.GetMonitorUptimeTimelineResponse
	31, // [31:40] is the sub-list for method output_type
	22, // [22:31] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_openseer_v1_monitors_proto_init() }
func file_openseer_v1_monitors_proto_init() {
	if File_openseer_v1_monitors_proto != nil {
		return
	}
	file_openseer_v1_monitors_proto_msgTypes[0].OneofWrappers = []any{}
	file_openseer_v1_monitors_proto_msgTypes[4].OneofWrappers = []any{}
	file_openseer_v1_monitors_proto_msgTypes[14].OneofWrappers = []any{}
	file_openseer_v1_monitors_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_openseer_v1_monitors_proto_rawDesc), len(file_openseer_v1_monitors_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openseer_v1_monitors_proto_goTypes,
		DependencyIndexes: file_openseer_v1_monitors_proto_depIdxs,
		MessageInfos:      file_openseer_v1_monitors_proto_msgTypes,
	}.Build()
	File_openseer_v1_monitors_proto = out.File
	file_openseer_v1_monitors_proto_goTypes = nil
	file_openseer_v1_monitors_proto_depIdxs = nil
}
