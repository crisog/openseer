// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openseer/v1/enrollment.proto

package openseerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/crisog/openseer/gen/openseer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnrollmentServiceName is the fully-qualified name of the EnrollmentService service.
	EnrollmentServiceName = "openseer.v1.EnrollmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnrollmentServiceEnrollWorkerProcedure is the fully-qualified name of the EnrollmentService's
	// EnrollWorker RPC.
	EnrollmentServiceEnrollWorkerProcedure = "/openseer.v1.EnrollmentService/EnrollWorker"
	// EnrollmentServiceRenewEnrollmentProcedure is the fully-qualified name of the EnrollmentService's
	// RenewEnrollment RPC.
	EnrollmentServiceRenewEnrollmentProcedure = "/openseer.v1.EnrollmentService/RenewEnrollment"
	// EnrollmentServiceRevokeEnrollmentProcedure is the fully-qualified name of the EnrollmentService's
	// RevokeEnrollment RPC.
	EnrollmentServiceRevokeEnrollmentProcedure = "/openseer.v1.EnrollmentService/RevokeEnrollment"
	// EnrollmentServiceGetWorkerStatusProcedure is the fully-qualified name of the EnrollmentService's
	// GetWorkerStatus RPC.
	EnrollmentServiceGetWorkerStatusProcedure = "/openseer.v1.EnrollmentService/GetWorkerStatus"
	// EnrollmentServiceListWorkersProcedure is the fully-qualified name of the EnrollmentService's
	// ListWorkers RPC.
	EnrollmentServiceListWorkersProcedure = "/openseer.v1.EnrollmentService/ListWorkers"
)

// EnrollmentServiceClient is a client for the openseer.v1.EnrollmentService service.
type EnrollmentServiceClient interface {
	EnrollWorker(context.Context, *connect.Request[v1.EnrollWorkerRequest]) (*connect.Response[v1.EnrollWorkerResponse], error)
	RenewEnrollment(context.Context, *connect.Request[v1.RenewEnrollmentRequest]) (*connect.Response[v1.RenewEnrollmentResponse], error)
	RevokeEnrollment(context.Context, *connect.Request[v1.RevokeEnrollmentRequest]) (*connect.Response[v1.RevokeEnrollmentResponse], error)
	GetWorkerStatus(context.Context, *connect.Request[v1.GetWorkerStatusRequest]) (*connect.Response[v1.GetWorkerStatusResponse], error)
	ListWorkers(context.Context, *connect.Request[v1.ListWorkersRequest]) (*connect.Response[v1.ListWorkersResponse], error)
}

// NewEnrollmentServiceClient constructs a client for the openseer.v1.EnrollmentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnrollmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnrollmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	enrollmentServiceMethods := v1.File_openseer_v1_enrollment_proto.Services().ByName("EnrollmentService").Methods()
	return &enrollmentServiceClient{
		enrollWorker: connect.NewClient[v1.EnrollWorkerRequest, v1.EnrollWorkerResponse](
			httpClient,
			baseURL+EnrollmentServiceEnrollWorkerProcedure,
			connect.WithSchema(enrollmentServiceMethods.ByName("EnrollWorker")),
			connect.WithClientOptions(opts...),
		),
		renewEnrollment: connect.NewClient[v1.RenewEnrollmentRequest, v1.RenewEnrollmentResponse](
			httpClient,
			baseURL+EnrollmentServiceRenewEnrollmentProcedure,
			connect.WithSchema(enrollmentServiceMethods.ByName("RenewEnrollment")),
			connect.WithClientOptions(opts...),
		),
		revokeEnrollment: connect.NewClient[v1.RevokeEnrollmentRequest, v1.RevokeEnrollmentResponse](
			httpClient,
			baseURL+EnrollmentServiceRevokeEnrollmentProcedure,
			connect.WithSchema(enrollmentServiceMethods.ByName("RevokeEnrollment")),
			connect.WithClientOptions(opts...),
		),
		getWorkerStatus: connect.NewClient[v1.GetWorkerStatusRequest, v1.GetWorkerStatusResponse](
			httpClient,
			baseURL+EnrollmentServiceGetWorkerStatusProcedure,
			connect.WithSchema(enrollmentServiceMethods.ByName("GetWorkerStatus")),
			connect.WithClientOptions(opts...),
		),
		listWorkers: connect.NewClient[v1.ListWorkersRequest, v1.ListWorkersResponse](
			httpClient,
			baseURL+EnrollmentServiceListWorkersProcedure,
			connect.WithSchema(enrollmentServiceMethods.ByName("ListWorkers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// enrollmentServiceClient implements EnrollmentServiceClient.
type enrollmentServiceClient struct {
	enrollWorker     *connect.Client[v1.EnrollWorkerRequest, v1.EnrollWorkerResponse]
	renewEnrollment  *connect.Client[v1.RenewEnrollmentRequest, v1.RenewEnrollmentResponse]
	revokeEnrollment *connect.Client[v1.RevokeEnrollmentRequest, v1.RevokeEnrollmentResponse]
	getWorkerStatus  *connect.Client[v1.GetWorkerStatusRequest, v1.GetWorkerStatusResponse]
	listWorkers      *connect.Client[v1.ListWorkersRequest, v1.ListWorkersResponse]
}

// EnrollWorker calls openseer.v1.EnrollmentService.EnrollWorker.
func (c *enrollmentServiceClient) EnrollWorker(ctx context.Context, req *connect.Request[v1.EnrollWorkerRequest]) (*connect.Response[v1.EnrollWorkerResponse], error) {
	return c.enrollWorker.CallUnary(ctx, req)
}

// RenewEnrollment calls openseer.v1.EnrollmentService.RenewEnrollment.
func (c *enrollmentServiceClient) RenewEnrollment(ctx context.Context, req *connect.Request[v1.RenewEnrollmentRequest]) (*connect.Response[v1.RenewEnrollmentResponse], error) {
	return c.renewEnrollment.CallUnary(ctx, req)
}

// RevokeEnrollment calls openseer.v1.EnrollmentService.RevokeEnrollment.
func (c *enrollmentServiceClient) RevokeEnrollment(ctx context.Context, req *connect.Request[v1.RevokeEnrollmentRequest]) (*connect.Response[v1.RevokeEnrollmentResponse], error) {
	return c.revokeEnrollment.CallUnary(ctx, req)
}

// GetWorkerStatus calls openseer.v1.EnrollmentService.GetWorkerStatus.
func (c *enrollmentServiceClient) GetWorkerStatus(ctx context.Context, req *connect.Request[v1.GetWorkerStatusRequest]) (*connect.Response[v1.GetWorkerStatusResponse], error) {
	return c.getWorkerStatus.CallUnary(ctx, req)
}

// ListWorkers calls openseer.v1.EnrollmentService.ListWorkers.
func (c *enrollmentServiceClient) ListWorkers(ctx context.Context, req *connect.Request[v1.ListWorkersRequest]) (*connect.Response[v1.ListWorkersResponse], error) {
	return c.listWorkers.CallUnary(ctx, req)
}

// EnrollmentServiceHandler is an implementation of the openseer.v1.EnrollmentService service.
type EnrollmentServiceHandler interface {
	EnrollWorker(context.Context, *connect.Request[v1.EnrollWorkerRequest]) (*connect.Response[v1.EnrollWorkerResponse], error)
	RenewEnrollment(context.Context, *connect.Request[v1.RenewEnrollmentRequest]) (*connect.Response[v1.RenewEnrollmentResponse], error)
	RevokeEnrollment(context.Context, *connect.Request[v1.RevokeEnrollmentRequest]) (*connect.Response[v1.RevokeEnrollmentResponse], error)
	GetWorkerStatus(context.Context, *connect.Request[v1.GetWorkerStatusRequest]) (*connect.Response[v1.GetWorkerStatusResponse], error)
	ListWorkers(context.Context, *connect.Request[v1.ListWorkersRequest]) (*connect.Response[v1.ListWorkersResponse], error)
}

// NewEnrollmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnrollmentServiceHandler(svc EnrollmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enrollmentServiceMethods := v1.File_openseer_v1_enrollment_proto.Services().ByName("EnrollmentService").Methods()
	enrollmentServiceEnrollWorkerHandler := connect.NewUnaryHandler(
		EnrollmentServiceEnrollWorkerProcedure,
		svc.EnrollWorker,
		connect.WithSchema(enrollmentServiceMethods.ByName("EnrollWorker")),
		connect.WithHandlerOptions(opts...),
	)
	enrollmentServiceRenewEnrollmentHandler := connect.NewUnaryHandler(
		EnrollmentServiceRenewEnrollmentProcedure,
		svc.RenewEnrollment,
		connect.WithSchema(enrollmentServiceMethods.ByName("RenewEnrollment")),
		connect.WithHandlerOptions(opts...),
	)
	enrollmentServiceRevokeEnrollmentHandler := connect.NewUnaryHandler(
		EnrollmentServiceRevokeEnrollmentProcedure,
		svc.RevokeEnrollment,
		connect.WithSchema(enrollmentServiceMethods.ByName("RevokeEnrollment")),
		connect.WithHandlerOptions(opts...),
	)
	enrollmentServiceGetWorkerStatusHandler := connect.NewUnaryHandler(
		EnrollmentServiceGetWorkerStatusProcedure,
		svc.GetWorkerStatus,
		connect.WithSchema(enrollmentServiceMethods.ByName("GetWorkerStatus")),
		connect.WithHandlerOptions(opts...),
	)
	enrollmentServiceListWorkersHandler := connect.NewUnaryHandler(
		EnrollmentServiceListWorkersProcedure,
		svc.ListWorkers,
		connect.WithSchema(enrollmentServiceMethods.ByName("ListWorkers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openseer.v1.EnrollmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnrollmentServiceEnrollWorkerProcedure:
			enrollmentServiceEnrollWorkerHandler.ServeHTTP(w, r)
		case EnrollmentServiceRenewEnrollmentProcedure:
			enrollmentServiceRenewEnrollmentHandler.ServeHTTP(w, r)
		case EnrollmentServiceRevokeEnrollmentProcedure:
			enrollmentServiceRevokeEnrollmentHandler.ServeHTTP(w, r)
		case EnrollmentServiceGetWorkerStatusProcedure:
			enrollmentServiceGetWorkerStatusHandler.ServeHTTP(w, r)
		case EnrollmentServiceListWorkersProcedure:
			enrollmentServiceListWorkersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnrollmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnrollmentServiceHandler struct{}

func (UnimplementedEnrollmentServiceHandler) EnrollWorker(context.Context, *connect.Request[v1.EnrollWorkerRequest]) (*connect.Response[v1.EnrollWorkerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.EnrollmentService.EnrollWorker is not implemented"))
}

func (UnimplementedEnrollmentServiceHandler) RenewEnrollment(context.Context, *connect.Request[v1.RenewEnrollmentRequest]) (*connect.Response[v1.RenewEnrollmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.EnrollmentService.RenewEnrollment is not implemented"))
}

func (UnimplementedEnrollmentServiceHandler) RevokeEnrollment(context.Context, *connect.Request[v1.RevokeEnrollmentRequest]) (*connect.Response[v1.RevokeEnrollmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.EnrollmentService.RevokeEnrollment is not implemented"))
}

func (UnimplementedEnrollmentServiceHandler) GetWorkerStatus(context.Context, *connect.Request[v1.GetWorkerStatusRequest]) (*connect.Response[v1.GetWorkerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.EnrollmentService.GetWorkerStatus is not implemented"))
}

func (UnimplementedEnrollmentServiceHandler) ListWorkers(context.Context, *connect.Request[v1.ListWorkersRequest]) (*connect.Response[v1.ListWorkersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.EnrollmentService.ListWorkers is not implemented"))
}
