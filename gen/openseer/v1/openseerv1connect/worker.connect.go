// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openseer/v1/worker.proto

package openseerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/crisog/openseer/gen/openseer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkerServiceName is the fully-qualified name of the WorkerService service.
	WorkerServiceName = "openseer.v1.WorkerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkerServiceWorkerStreamProcedure is the fully-qualified name of the WorkerService's
	// WorkerStream RPC.
	WorkerServiceWorkerStreamProcedure = "/openseer.v1.WorkerService/WorkerStream"
)

// WorkerServiceClient is a client for the openseer.v1.WorkerService service.
type WorkerServiceClient interface {
	WorkerStream(context.Context) *connect.BidiStreamForClient[v1.WorkerMessage, v1.ServerMessage]
}

// NewWorkerServiceClient constructs a client for the openseer.v1.WorkerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workerServiceMethods := v1.File_openseer_v1_worker_proto.Services().ByName("WorkerService").Methods()
	return &workerServiceClient{
		workerStream: connect.NewClient[v1.WorkerMessage, v1.ServerMessage](
			httpClient,
			baseURL+WorkerServiceWorkerStreamProcedure,
			connect.WithSchema(workerServiceMethods.ByName("WorkerStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workerServiceClient implements WorkerServiceClient.
type workerServiceClient struct {
	workerStream *connect.Client[v1.WorkerMessage, v1.ServerMessage]
}

// WorkerStream calls openseer.v1.WorkerService.WorkerStream.
func (c *workerServiceClient) WorkerStream(ctx context.Context) *connect.BidiStreamForClient[v1.WorkerMessage, v1.ServerMessage] {
	return c.workerStream.CallBidiStream(ctx)
}

// WorkerServiceHandler is an implementation of the openseer.v1.WorkerService service.
type WorkerServiceHandler interface {
	WorkerStream(context.Context, *connect.BidiStream[v1.WorkerMessage, v1.ServerMessage]) error
}

// NewWorkerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkerServiceHandler(svc WorkerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workerServiceMethods := v1.File_openseer_v1_worker_proto.Services().ByName("WorkerService").Methods()
	workerServiceWorkerStreamHandler := connect.NewBidiStreamHandler(
		WorkerServiceWorkerStreamProcedure,
		svc.WorkerStream,
		connect.WithSchema(workerServiceMethods.ByName("WorkerStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openseer.v1.WorkerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkerServiceWorkerStreamProcedure:
			workerServiceWorkerStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkerServiceHandler struct{}

func (UnimplementedWorkerServiceHandler) WorkerStream(context.Context, *connect.BidiStream[v1.WorkerMessage, v1.ServerMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.WorkerService.WorkerStream is not implemented"))
}
