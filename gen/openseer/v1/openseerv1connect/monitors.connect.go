// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openseer/v1/monitors.proto

package openseerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/crisog/openseer/gen/openseer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitorsServiceName is the fully-qualified name of the MonitorsService service.
	MonitorsServiceName = "openseer.v1.MonitorsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitorsServiceCreateMonitorProcedure is the fully-qualified name of the MonitorsService's
	// CreateMonitor RPC.
	MonitorsServiceCreateMonitorProcedure = "/openseer.v1.MonitorsService/CreateMonitor"
	// MonitorsServiceGetMonitorProcedure is the fully-qualified name of the MonitorsService's
	// GetMonitor RPC.
	MonitorsServiceGetMonitorProcedure = "/openseer.v1.MonitorsService/GetMonitor"
	// MonitorsServiceUpdateMonitorProcedure is the fully-qualified name of the MonitorsService's
	// UpdateMonitor RPC.
	MonitorsServiceUpdateMonitorProcedure = "/openseer.v1.MonitorsService/UpdateMonitor"
	// MonitorsServiceListMonitorsProcedure is the fully-qualified name of the MonitorsService's
	// ListMonitors RPC.
	MonitorsServiceListMonitorsProcedure = "/openseer.v1.MonitorsService/ListMonitors"
	// MonitorsServiceGetMonitorResultsProcedure is the fully-qualified name of the MonitorsService's
	// GetMonitorResults RPC.
	MonitorsServiceGetMonitorResultsProcedure = "/openseer.v1.MonitorsService/GetMonitorResults"
	// MonitorsServiceGetMonitorMetricsProcedure is the fully-qualified name of the MonitorsService's
	// GetMonitorMetrics RPC.
	MonitorsServiceGetMonitorMetricsProcedure = "/openseer.v1.MonitorsService/GetMonitorMetrics"
	// MonitorsServiceGetMonitorUptimeProcedure is the fully-qualified name of the MonitorsService's
	// GetMonitorUptime RPC.
	MonitorsServiceGetMonitorUptimeProcedure = "/openseer.v1.MonitorsService/GetMonitorUptime"
	// MonitorsServiceGetMonitorUptimeTimelineProcedure is the fully-qualified name of the
	// MonitorsService's GetMonitorUptimeTimeline RPC.
	MonitorsServiceGetMonitorUptimeTimelineProcedure = "/openseer.v1.MonitorsService/GetMonitorUptimeTimeline"
)

// MonitorsServiceClient is a client for the openseer.v1.MonitorsService service.
type MonitorsServiceClient interface {
	CreateMonitor(context.Context, *connect.Request[v1.CreateMonitorRequest]) (*connect.Response[v1.CreateMonitorResponse], error)
	GetMonitor(context.Context, *connect.Request[v1.GetMonitorRequest]) (*connect.Response[v1.GetMonitorResponse], error)
	UpdateMonitor(context.Context, *connect.Request[v1.UpdateMonitorRequest]) (*connect.Response[v1.UpdateMonitorResponse], error)
	ListMonitors(context.Context, *connect.Request[v1.ListMonitorsRequest]) (*connect.Response[v1.ListMonitorsResponse], error)
	GetMonitorResults(context.Context, *connect.Request[v1.GetMonitorResultsRequest]) (*connect.Response[v1.GetMonitorResultsResponse], error)
	GetMonitorMetrics(context.Context, *connect.Request[v1.GetMonitorMetricsRequest]) (*connect.Response[v1.GetMonitorMetricsResponse], error)
	GetMonitorUptime(context.Context, *connect.Request[v1.GetMonitorUptimeRequest]) (*connect.Response[v1.GetMonitorUptimeResponse], error)
	GetMonitorUptimeTimeline(context.Context, *connect.Request[v1.GetMonitorUptimeTimelineRequest]) (*connect.Response[v1.GetMonitorUptimeTimelineResponse], error)
}

// NewMonitorsServiceClient constructs a client for the openseer.v1.MonitorsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitorsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitorsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	monitorsServiceMethods := v1.File_openseer_v1_monitors_proto.Services().ByName("MonitorsService").Methods()
	return &monitorsServiceClient{
		createMonitor: connect.NewClient[v1.CreateMonitorRequest, v1.CreateMonitorResponse](
			httpClient,
			baseURL+MonitorsServiceCreateMonitorProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("CreateMonitor")),
			connect.WithClientOptions(opts...),
		),
		getMonitor: connect.NewClient[v1.GetMonitorRequest, v1.GetMonitorResponse](
			httpClient,
			baseURL+MonitorsServiceGetMonitorProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("GetMonitor")),
			connect.WithClientOptions(opts...),
		),
		updateMonitor: connect.NewClient[v1.UpdateMonitorRequest, v1.UpdateMonitorResponse](
			httpClient,
			baseURL+MonitorsServiceUpdateMonitorProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("UpdateMonitor")),
			connect.WithClientOptions(opts...),
		),
		listMonitors: connect.NewClient[v1.ListMonitorsRequest, v1.ListMonitorsResponse](
			httpClient,
			baseURL+MonitorsServiceListMonitorsProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("ListMonitors")),
			connect.WithClientOptions(opts...),
		),
		getMonitorResults: connect.NewClient[v1.GetMonitorResultsRequest, v1.GetMonitorResultsResponse](
			httpClient,
			baseURL+MonitorsServiceGetMonitorResultsProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorResults")),
			connect.WithClientOptions(opts...),
		),
		getMonitorMetrics: connect.NewClient[v1.GetMonitorMetricsRequest, v1.GetMonitorMetricsResponse](
			httpClient,
			baseURL+MonitorsServiceGetMonitorMetricsProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorMetrics")),
			connect.WithClientOptions(opts...),
		),
		getMonitorUptime: connect.NewClient[v1.GetMonitorUptimeRequest, v1.GetMonitorUptimeResponse](
			httpClient,
			baseURL+MonitorsServiceGetMonitorUptimeProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorUptime")),
			connect.WithClientOptions(opts...),
		),
		getMonitorUptimeTimeline: connect.NewClient[v1.GetMonitorUptimeTimelineRequest, v1.GetMonitorUptimeTimelineResponse](
			httpClient,
			baseURL+MonitorsServiceGetMonitorUptimeTimelineProcedure,
			connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorUptimeTimeline")),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitorsServiceClient implements MonitorsServiceClient.
type monitorsServiceClient struct {
	createMonitor            *connect.Client[v1.CreateMonitorRequest, v1.CreateMonitorResponse]
	getMonitor               *connect.Client[v1.GetMonitorRequest, v1.GetMonitorResponse]
	updateMonitor            *connect.Client[v1.UpdateMonitorRequest, v1.UpdateMonitorResponse]
	listMonitors             *connect.Client[v1.ListMonitorsRequest, v1.ListMonitorsResponse]
	getMonitorResults        *connect.Client[v1.GetMonitorResultsRequest, v1.GetMonitorResultsResponse]
	getMonitorMetrics        *connect.Client[v1.GetMonitorMetricsRequest, v1.GetMonitorMetricsResponse]
	getMonitorUptime         *connect.Client[v1.GetMonitorUptimeRequest, v1.GetMonitorUptimeResponse]
	getMonitorUptimeTimeline *connect.Client[v1.GetMonitorUptimeTimelineRequest, v1.GetMonitorUptimeTimelineResponse]
}

// CreateMonitor calls openseer.v1.MonitorsService.CreateMonitor.
func (c *monitorsServiceClient) CreateMonitor(ctx context.Context, req *connect.Request[v1.CreateMonitorRequest]) (*connect.Response[v1.CreateMonitorResponse], error) {
	return c.createMonitor.CallUnary(ctx, req)
}

// GetMonitor calls openseer.v1.MonitorsService.GetMonitor.
func (c *monitorsServiceClient) GetMonitor(ctx context.Context, req *connect.Request[v1.GetMonitorRequest]) (*connect.Response[v1.GetMonitorResponse], error) {
	return c.getMonitor.CallUnary(ctx, req)
}

// UpdateMonitor calls openseer.v1.MonitorsService.UpdateMonitor.
func (c *monitorsServiceClient) UpdateMonitor(ctx context.Context, req *connect.Request[v1.UpdateMonitorRequest]) (*connect.Response[v1.UpdateMonitorResponse], error) {
	return c.updateMonitor.CallUnary(ctx, req)
}

// ListMonitors calls openseer.v1.MonitorsService.ListMonitors.
func (c *monitorsServiceClient) ListMonitors(ctx context.Context, req *connect.Request[v1.ListMonitorsRequest]) (*connect.Response[v1.ListMonitorsResponse], error) {
	return c.listMonitors.CallUnary(ctx, req)
}

// GetMonitorResults calls openseer.v1.MonitorsService.GetMonitorResults.
func (c *monitorsServiceClient) GetMonitorResults(ctx context.Context, req *connect.Request[v1.GetMonitorResultsRequest]) (*connect.Response[v1.GetMonitorResultsResponse], error) {
	return c.getMonitorResults.CallUnary(ctx, req)
}

// GetMonitorMetrics calls openseer.v1.MonitorsService.GetMonitorMetrics.
func (c *monitorsServiceClient) GetMonitorMetrics(ctx context.Context, req *connect.Request[v1.GetMonitorMetricsRequest]) (*connect.Response[v1.GetMonitorMetricsResponse], error) {
	return c.getMonitorMetrics.CallUnary(ctx, req)
}

// GetMonitorUptime calls openseer.v1.MonitorsService.GetMonitorUptime.
func (c *monitorsServiceClient) GetMonitorUptime(ctx context.Context, req *connect.Request[v1.GetMonitorUptimeRequest]) (*connect.Response[v1.GetMonitorUptimeResponse], error) {
	return c.getMonitorUptime.CallUnary(ctx, req)
}

// GetMonitorUptimeTimeline calls openseer.v1.MonitorsService.GetMonitorUptimeTimeline.
func (c *monitorsServiceClient) GetMonitorUptimeTimeline(ctx context.Context, req *connect.Request[v1.GetMonitorUptimeTimelineRequest]) (*connect.Response[v1.GetMonitorUptimeTimelineResponse], error) {
	return c.getMonitorUptimeTimeline.CallUnary(ctx, req)
}

// MonitorsServiceHandler is an implementation of the openseer.v1.MonitorsService service.
type MonitorsServiceHandler interface {
	CreateMonitor(context.Context, *connect.Request[v1.CreateMonitorRequest]) (*connect.Response[v1.CreateMonitorResponse], error)
	GetMonitor(context.Context, *connect.Request[v1.GetMonitorRequest]) (*connect.Response[v1.GetMonitorResponse], error)
	UpdateMonitor(context.Context, *connect.Request[v1.UpdateMonitorRequest]) (*connect.Response[v1.UpdateMonitorResponse], error)
	ListMonitors(context.Context, *connect.Request[v1.ListMonitorsRequest]) (*connect.Response[v1.ListMonitorsResponse], error)
	GetMonitorResults(context.Context, *connect.Request[v1.GetMonitorResultsRequest]) (*connect.Response[v1.GetMonitorResultsResponse], error)
	GetMonitorMetrics(context.Context, *connect.Request[v1.GetMonitorMetricsRequest]) (*connect.Response[v1.GetMonitorMetricsResponse], error)
	GetMonitorUptime(context.Context, *connect.Request[v1.GetMonitorUptimeRequest]) (*connect.Response[v1.GetMonitorUptimeResponse], error)
	GetMonitorUptimeTimeline(context.Context, *connect.Request[v1.GetMonitorUptimeTimelineRequest]) (*connect.Response[v1.GetMonitorUptimeTimelineResponse], error)
}

// NewMonitorsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitorsServiceHandler(svc MonitorsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitorsServiceMethods := v1.File_openseer_v1_monitors_proto.Services().ByName("MonitorsService").Methods()
	monitorsServiceCreateMonitorHandler := connect.NewUnaryHandler(
		MonitorsServiceCreateMonitorProcedure,
		svc.CreateMonitor,
		connect.WithSchema(monitorsServiceMethods.ByName("CreateMonitor")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceGetMonitorHandler := connect.NewUnaryHandler(
		MonitorsServiceGetMonitorProcedure,
		svc.GetMonitor,
		connect.WithSchema(monitorsServiceMethods.ByName("GetMonitor")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceUpdateMonitorHandler := connect.NewUnaryHandler(
		MonitorsServiceUpdateMonitorProcedure,
		svc.UpdateMonitor,
		connect.WithSchema(monitorsServiceMethods.ByName("UpdateMonitor")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceListMonitorsHandler := connect.NewUnaryHandler(
		MonitorsServiceListMonitorsProcedure,
		svc.ListMonitors,
		connect.WithSchema(monitorsServiceMethods.ByName("ListMonitors")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceGetMonitorResultsHandler := connect.NewUnaryHandler(
		MonitorsServiceGetMonitorResultsProcedure,
		svc.GetMonitorResults,
		connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorResults")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceGetMonitorMetricsHandler := connect.NewUnaryHandler(
		MonitorsServiceGetMonitorMetricsProcedure,
		svc.GetMonitorMetrics,
		connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceGetMonitorUptimeHandler := connect.NewUnaryHandler(
		MonitorsServiceGetMonitorUptimeProcedure,
		svc.GetMonitorUptime,
		connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorUptime")),
		connect.WithHandlerOptions(opts...),
	)
	monitorsServiceGetMonitorUptimeTimelineHandler := connect.NewUnaryHandler(
		MonitorsServiceGetMonitorUptimeTimelineProcedure,
		svc.GetMonitorUptimeTimeline,
		connect.WithSchema(monitorsServiceMethods.ByName("GetMonitorUptimeTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openseer.v1.MonitorsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitorsServiceCreateMonitorProcedure:
			monitorsServiceCreateMonitorHandler.ServeHTTP(w, r)
		case MonitorsServiceGetMonitorProcedure:
			monitorsServiceGetMonitorHandler.ServeHTTP(w, r)
		case MonitorsServiceUpdateMonitorProcedure:
			monitorsServiceUpdateMonitorHandler.ServeHTTP(w, r)
		case MonitorsServiceListMonitorsProcedure:
			monitorsServiceListMonitorsHandler.ServeHTTP(w, r)
		case MonitorsServiceGetMonitorResultsProcedure:
			monitorsServiceGetMonitorResultsHandler.ServeHTTP(w, r)
		case MonitorsServiceGetMonitorMetricsProcedure:
			monitorsServiceGetMonitorMetricsHandler.ServeHTTP(w, r)
		case MonitorsServiceGetMonitorUptimeProcedure:
			monitorsServiceGetMonitorUptimeHandler.ServeHTTP(w, r)
		case MonitorsServiceGetMonitorUptimeTimelineProcedure:
			monitorsServiceGetMonitorUptimeTimelineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitorsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitorsServiceHandler struct{}

func (UnimplementedMonitorsServiceHandler) CreateMonitor(context.Context, *connect.Request[v1.CreateMonitorRequest]) (*connect.Response[v1.CreateMonitorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.CreateMonitor is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) GetMonitor(context.Context, *connect.Request[v1.GetMonitorRequest]) (*connect.Response[v1.GetMonitorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.GetMonitor is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) UpdateMonitor(context.Context, *connect.Request[v1.UpdateMonitorRequest]) (*connect.Response[v1.UpdateMonitorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.UpdateMonitor is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) ListMonitors(context.Context, *connect.Request[v1.ListMonitorsRequest]) (*connect.Response[v1.ListMonitorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.ListMonitors is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) GetMonitorResults(context.Context, *connect.Request[v1.GetMonitorResultsRequest]) (*connect.Response[v1.GetMonitorResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.GetMonitorResults is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) GetMonitorMetrics(context.Context, *connect.Request[v1.GetMonitorMetricsRequest]) (*connect.Response[v1.GetMonitorMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.GetMonitorMetrics is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) GetMonitorUptime(context.Context, *connect.Request[v1.GetMonitorUptimeRequest]) (*connect.Response[v1.GetMonitorUptimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.GetMonitorUptime is not implemented"))
}

func (UnimplementedMonitorsServiceHandler) GetMonitorUptimeTimeline(context.Context, *connect.Request[v1.GetMonitorUptimeTimelineRequest]) (*connect.Response[v1.GetMonitorUptimeTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openseer.v1.MonitorsService.GetMonitorUptimeTimeline is not implemented"))
}
