// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: openseer/v1/worker.proto

package openseerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*WorkerMessage_Register
	//	*WorkerMessage_JobRequest
	//	*WorkerMessage_Result
	//	*WorkerMessage_LeaseRenewal
	//	*WorkerMessage_Pong
	Message       isWorkerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerMessage) Reset() {
	*x = WorkerMessage{}
	mi := &file_openseer_v1_worker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMessage) ProtoMessage() {}

func (x *WorkerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMessage.ProtoReflect.Descriptor instead.
func (*WorkerMessage) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerMessage) GetMessage() isWorkerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkerMessage) GetRegister() *RegisterRequest {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *WorkerMessage) GetJobRequest() *JobRequest {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_JobRequest); ok {
			return x.JobRequest
		}
	}
	return nil
}

func (x *WorkerMessage) GetResult() *MonitorResult {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *WorkerMessage) GetLeaseRenewal() *LeaseRenewal {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_LeaseRenewal); ok {
			return x.LeaseRenewal
		}
	}
	return nil
}

func (x *WorkerMessage) GetPong() *Pong {
	if x != nil {
		if x, ok := x.Message.(*WorkerMessage_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

type isWorkerMessage_Message interface {
	isWorkerMessage_Message()
}

type WorkerMessage_Register struct {
	Register *RegisterRequest `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type WorkerMessage_JobRequest struct {
	JobRequest *JobRequest `protobuf:"bytes,2,opt,name=job_request,json=jobRequest,proto3,oneof"` // Replaced CapacityUpdate with JobRequest
}

type WorkerMessage_Result struct {
	Result *MonitorResult `protobuf:"bytes,3,opt,name=result,proto3,oneof"`
}

type WorkerMessage_LeaseRenewal struct {
	LeaseRenewal *LeaseRenewal `protobuf:"bytes,4,opt,name=lease_renewal,json=leaseRenewal,proto3,oneof"`
}

type WorkerMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,5,opt,name=pong,proto3,oneof"`
}

func (*WorkerMessage_Register) isWorkerMessage_Message() {}

func (*WorkerMessage_JobRequest) isWorkerMessage_Message() {}

func (*WorkerMessage_Result) isWorkerMessage_Message() {}

func (*WorkerMessage_LeaseRenewal) isWorkerMessage_Message() {}

func (*WorkerMessage_Pong) isWorkerMessage_Message() {}

type LeaseRenewal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaseRenewal) Reset() {
	*x = LeaseRenewal{}
	mi := &file_openseer_v1_worker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseRenewal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRenewal) ProtoMessage() {}

func (x *LeaseRenewal) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRenewal.ProtoReflect.Descriptor instead.
func (*LeaseRenewal) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{1}
}

func (x *LeaseRenewal) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ServerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*ServerMessage_Registered
	//	*ServerMessage_Job
	//	*ServerMessage_Ack
	//	*ServerMessage_Ping
	Message       isServerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_openseer_v1_worker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ServerMessage) GetMessage() isServerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ServerMessage) GetRegistered() *RegisterResponse {
	if x != nil {
		if x, ok := x.Message.(*ServerMessage_Registered); ok {
			return x.Registered
		}
	}
	return nil
}

func (x *ServerMessage) GetJob() *MonitorJob {
	if x != nil {
		if x, ok := x.Message.(*ServerMessage_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *ServerMessage) GetAck() *ResultAck {
	if x != nil {
		if x, ok := x.Message.(*ServerMessage_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *ServerMessage) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Message.(*ServerMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

type isServerMessage_Message interface {
	isServerMessage_Message()
}

type ServerMessage_Registered struct {
	Registered *RegisterResponse `protobuf:"bytes,1,opt,name=registered,proto3,oneof"`
}

type ServerMessage_Job struct {
	Job *MonitorJob `protobuf:"bytes,2,opt,name=job,proto3,oneof"`
}

type ServerMessage_Ack struct {
	Ack *ResultAck `protobuf:"bytes,3,opt,name=ack,proto3,oneof"`
}

type ServerMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

func (*ServerMessage_Registered) isServerMessage_Message() {}

func (*ServerMessage_Job) isServerMessage_Message() {}

func (*ServerMessage_Ack) isServerMessage_Message() {}

func (*ServerMessage_Ping) isServerMessage_Message() {}

type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerVersion string                 `protobuf:"bytes,1,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_openseer_v1_worker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterRequest) GetWorkerVersion() string {
	if x != nil {
		return x.WorkerVersion
	}
	return ""
}

func (x *RegisterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Accepted      bool                   `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_openseer_v1_worker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterResponse) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *RegisterResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *RegisterResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type JobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // Number of jobs the worker wants to receive
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	mi := &file_openseer_v1_worker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{5}
}

func (x *JobRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MonitorJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	MonitorId     string                 `protobuf:"bytes,2,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	TimeoutMs     int32                  `protobuf:"varint,4,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	Method        string                 `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorJob) Reset() {
	*x = MonitorJob{}
	mi := &file_openseer_v1_worker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorJob) ProtoMessage() {}

func (x *MonitorJob) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorJob.ProtoReflect.Descriptor instead.
func (*MonitorJob) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{6}
}

func (x *MonitorJob) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *MonitorJob) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *MonitorJob) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MonitorJob) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *MonitorJob) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MonitorJob) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ResultAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Committed     bool                   `protobuf:"varint,2,opt,name=committed,proto3" json:"committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultAck) Reset() {
	*x = ResultAck{}
	mi := &file_openseer_v1_worker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultAck) ProtoMessage() {}

func (x *ResultAck) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultAck.ProtoReflect.Descriptor instead.
func (*ResultAck) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{7}
}

func (x *ResultAck) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ResultAck) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

type Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_openseer_v1_worker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{8}
}

func (x *Ping) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Pong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_openseer_v1_worker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_openseer_v1_worker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_openseer_v1_worker_proto_rawDescGZIP(), []int{9}
}

func (x *Pong) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_openseer_v1_worker_proto protoreflect.FileDescriptor

const file_openseer_v1_worker_proto_rawDesc = "" +
	"\n" +
	"\x18openseer/v1/worker.proto\x12\vopenseer.v1\x1a\x1aopenseer/v1/monitors.proto\"\xb3\x02\n" +
	"\rWorkerMessage\x12:\n" +
	"\bregister\x18\x01 \x01(\v2\x1c.openseer.v1.RegisterRequestH\x00R\bregister\x12:\n" +
	"\vjob_request\x18\x02 \x01(\v2\x17.openseer.v1.JobRequestH\x00R\n" +
	"jobRequest\x124\n" +
	"\x06result\x18\x03 \x01(\v2\x1a.openseer.v1.MonitorResultH\x00R\x06result\x12@\n" +
	"\rlease_renewal\x18\x04 \x01(\v2\x19.openseer.v1.LeaseRenewalH\x00R\fleaseRenewal\x12'\n" +
	"\x04pong\x18\x05 \x01(\v2\x11.openseer.v1.PongH\x00R\x04pongB\t\n" +
	"\amessage\"%\n" +
	"\fLeaseRenewal\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\"\xdd\x01\n" +
	"\rServerMessage\x12?\n" +
	"\n" +
	"registered\x18\x01 \x01(\v2\x1d.openseer.v1.RegisterResponseH\x00R\n" +
	"registered\x12+\n" +
	"\x03job\x18\x02 \x01(\v2\x17.openseer.v1.MonitorJobH\x00R\x03job\x12*\n" +
	"\x03ack\x18\x03 \x01(\v2\x16.openseer.v1.ResultAckH\x00R\x03ack\x12'\n" +
	"\x04ping\x18\x04 \x01(\v2\x11.openseer.v1.PingH\x00R\x04pingB\t\n" +
	"\amessage\"P\n" +
	"\x0fRegisterRequest\x12%\n" +
	"\x0eworker_version\x18\x01 \x01(\tR\rworkerVersion\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\"c\n" +
	"\x10RegisterResponse\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x1a\n" +
	"\baccepted\x18\x02 \x01(\bR\baccepted\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\"\n" +
	"\n" +
	"JobRequest\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\"\x87\x02\n" +
	"\n" +
	"MonitorJob\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1d\n" +
	"\n" +
	"monitor_id\x18\x02 \x01(\tR\tmonitorId\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x04 \x01(\x05R\ttimeoutMs\x12\x16\n" +
	"\x06method\x18\x05 \x01(\tR\x06method\x12>\n" +
	"\aheaders\x18\x06 \x03(\v2$.openseer.v1.MonitorJob.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\tResultAck\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1c\n" +
	"\tcommitted\x18\x02 \x01(\bR\tcommitted\"$\n" +
	"\x04Ping\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\"$\n" +
	"\x04Pong\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp2[\n" +
	"\rWorkerService\x12J\n" +
	"\fWorkerStream\x12\x1a.openseer.v1.WorkerMessage\x1a\x1a.openseer.v1.ServerMessage(\x010\x01B7Z5github.com/crisog/openseer/gen/openseer/v1;openseerv1b\x06proto3"

var (
	file_openseer_v1_worker_proto_rawDescOnce sync.Once
	file_openseer_v1_worker_proto_rawDescData []byte
)

func file_openseer_v1_worker_proto_rawDescGZIP() []byte {
	file_openseer_v1_worker_proto_rawDescOnce.Do(func() {
		file_openseer_v1_worker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_openseer_v1_worker_proto_rawDesc), len(file_openseer_v1_worker_proto_rawDesc)))
	})
	return file_openseer_v1_worker_proto_rawDescData
}

var file_openseer_v1_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_openseer_v1_worker_proto_goTypes = []any{
	(*WorkerMessage)(nil),    // 0: openseer.v1.WorkerMessage
	(*LeaseRenewal)(nil),     // 1: openseer.v1.LeaseRenewal
	(*ServerMessage)(nil),    // 2: openseer.v1.ServerMessage
	(*RegisterRequest)(nil),  // 3: openseer.v1.RegisterRequest
	(*RegisterResponse)(nil), // 4: openseer.v1.RegisterResponse
	(*JobRequest)(nil),       // 5: openseer.v1.JobRequest
	(*MonitorJob)(nil),       // 6: openseer.v1.MonitorJob
	(*ResultAck)(nil),        // 7: openseer.v1.ResultAck
	(*Ping)(nil),             // 8: openseer.v1.Ping
	(*Pong)(nil),             // 9: openseer.v1.Pong
	nil,                      // 10: openseer.v1.MonitorJob.HeadersEntry
	(*MonitorResult)(nil),    // 11: openseer.v1.MonitorResult
}
var file_openseer_v1_worker_proto_depIdxs = []int32{
	3,  // 0: openseer.v1.WorkerMessage.register:type_name -> openseer.v1.RegisterRequest
	5,  // 1: openseer.v1.WorkerMessage.job_request:type_name -> openseer.v1.JobRequest
	11, // 2: openseer.v1.WorkerMessage.result:type_name -> openseer.v1.MonitorResult
	1,  // 3: openseer.v1.WorkerMessage.lease_renewal:type_name -> openseer.v1.LeaseRenewal
	9,  // 4: openseer.v1.WorkerMessage.pong:type_name -> openseer.v1.Pong
	4,  // 5: openseer.v1.ServerMessage.registered:type_name -> openseer.v1.RegisterResponse
	6,  // 6: openseer.v1.ServerMessage.job:type_name -> openseer.v1.MonitorJob
	7,  // 7: openseer.v1.ServerMessage.ack:type_name -> openseer.v1.ResultAck
	8,  // 8: openseer.v1.ServerMessage.ping:type_name -> openseer.v1.Ping
	10, // 9: openseer.v1.MonitorJob.headers:type_name -> openseer.v1.MonitorJob.HeadersEntry
	0,  // 10: openseer.v1.WorkerService.WorkerStream:input_type -> openseer.v1.WorkerMessage
	2,  // 11: openseer.v1.WorkerService.WorkerStream:output_type -> openseer.v1.ServerMessage
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_openseer_v1_worker_proto_init() }
func file_openseer_v1_worker_proto_init() {
	if File_openseer_v1_worker_proto != nil {
		return
	}
	file_openseer_v1_monitors_proto_init()
	file_openseer_v1_worker_proto_msgTypes[0].OneofWrappers = []any{
		(*WorkerMessage_Register)(nil),
		(*WorkerMessage_JobRequest)(nil),
		(*WorkerMessage_Result)(nil),
		(*WorkerMessage_LeaseRenewal)(nil),
		(*WorkerMessage_Pong)(nil),
	}
	file_openseer_v1_worker_proto_msgTypes[2].OneofWrappers = []any{
		(*ServerMessage_Registered)(nil),
		(*ServerMessage_Job)(nil),
		(*ServerMessage_Ack)(nil),
		(*ServerMessage_Ping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_openseer_v1_worker_proto_rawDesc), len(file_openseer_v1_worker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openseer_v1_worker_proto_goTypes,
		DependencyIndexes: file_openseer_v1_worker_proto_depIdxs,
		MessageInfos:      file_openseer_v1_worker_proto_msgTypes,
	}.Build()
	File_openseer_v1_worker_proto = out.File
	file_openseer_v1_worker_proto_goTypes = nil
	file_openseer_v1_worker_proto_depIdxs = nil
}
